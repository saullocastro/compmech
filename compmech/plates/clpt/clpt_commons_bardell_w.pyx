#cython: boundscheck=False
#cython: wraparound=False
#cython: cdivision=True
#cython: nonecheck=False
#cython: profile=False
#cython: infer_types=False
cimport numpy as np
import numpy as np
from libc.stdlib cimport malloc, free
from cython.parallel import prange


DOUBLE = np.float64
INT = np.int64
ctypedef np.double_t cDOUBLE
ctypedef np.int64_t cINT


cdef extern from "math.h":
    double cos(double theta) nogil
    double sin(double theta) nogil


cdef int maxorder = 30
cdef int num1 = 3
cdef int e_num = 6
cdef double pi=3.141592653589793


def fstrain(np.ndarray[cDOUBLE, ndim=1] c,
            np.ndarray[cDOUBLE, ndim=1] xs,
            np.ndarray[cDOUBLE, ndim=1] ys,
            double a, double b, int m1, int n1,
            np.ndarray[cDOUBLE, ndim=1] c0, int m0, int n0, int funcnum,
            int NL_kinematics, int num_cores=4):
    # NL_kinematics = 0 donnell
    # NL_kinematics = 1 sanders
    cdef int size_core, i
    cdef np.ndarray[cDOUBLE, ndim=2] es
    cdef np.ndarray[cDOUBLE, ndim=2] xs_core, ys_core
    cdef cfstraintype *cfstrain

    if NL_kinematics==0:
        cfstrain = &cfstrain_donnell
    else:
        raise NotImplementedError('only NL_kinematics=0 is implemented')
    #elif NL_kinematics==1:
        #cfstrain = &cfstrain_sanders

    size = xs.shape[0]
    add_size = num_cores - (size % num_cores)
    if add_size==num_cores:
        add_size=0
    new_size = size + add_size

    if (size % num_cores)!=0:
        xs_core = np.hstack((xs, np.zeros(add_size))).reshape(num_cores, -1)
        ys_core = np.hstack((ys, np.zeros(add_size))).reshape(num_cores, -1)
    else:
        xs_core = xs.reshape(num_cores, -1)
        ys_core = ys.reshape(num_cores, -1)

    size_core = xs_core.shape[1]

    es = np.zeros((num_cores, size_core*e_num), dtype=DOUBLE)
    for i in prange(num_cores, nogil=True, chunksize=1, num_threads=num_cores,
                    schedule='static'):
        cfstrain(&c[0], &xs_core[i,0], &ys_core[i,0],
                size_core, a, b, m1, n1, &c0[0], m0, n0, funcnum,
                &es[i,0])
    return es.ravel()[:size*e_num]


def fstress(np.ndarray[cDOUBLE, ndim=1] c,
       np.ndarray[cDOUBLE, ndim=2] F,
       np.ndarray[cDOUBLE, ndim=1] xs,
       np.ndarray[cDOUBLE, ndim=1] ys,
       double a, double b, int m1, int n1,
       np.ndarray[cDOUBLE, ndim=1] c0, int m0, int n0, int funcnum,
       int NL_kinematics, int num_cores=4):
    # NL_kinematics = 0 donnell
    # NL_kinematics = 1 sanders
    cdef int size_core, i
    cdef np.ndarray[cDOUBLE, ndim=2] Ns
    cdef np.ndarray[cDOUBLE, ndim=2] xs_core, ys_core

    size = xs.shape[0]
    add_size = num_cores - (size % num_cores)
    if add_size==num_cores:
        add_size=0
    new_size = size + add_size

    if (size % num_cores)!=0:
        xs_core = np.hstack((xs, np.zeros(add_size))).reshape(num_cores, -1)
        ys_core = np.hstack((ys, np.zeros(add_size))).reshape(num_cores, -1)
    else:
        xs_core = xs.reshape(num_cores, -1)
        ys_core = ys.reshape(num_cores, -1)

    size_core = xs_core.shape[1]

    Ns = np.zeros((num_cores, size_core*e_num), dtype=DOUBLE)
    for i in prange(num_cores, nogil=True, chunksize=1, num_threads=num_cores,
                    schedule='static'):
        cfN(&c[0], &xs_core[i,0], &ys_core[i,0], size_core, a,
                b, &F[0,0], m1, n1, &c0[0], m0, n0, funcnum,
                &Ns[i,0], NL_kinematics)
    return Ns.ravel()[:size*e_num]


def fuvw(np.ndarray[cDOUBLE, ndim=1] c, int m1, int n1, double a, double b,
        np.ndarray[cDOUBLE, ndim=1] xs, np.ndarray[cDOUBLE, ndim=1] ys,
        int num_cores=4):
    cdef int size_core, i
    cdef np.ndarray[cDOUBLE, ndim=2] us, vs, ws, phixs, phiys
    cdef np.ndarray[cDOUBLE, ndim=2] xs_core, ys_core

    size = xs.shape[0]
    add_size = num_cores - (size % num_cores)
    if add_size==num_cores:
        add_size=0
    new_size = size + add_size

    if (size % num_cores)!=0:
        xs_core = np.hstack((xs, np.zeros(add_size))).reshape(num_cores, -1)
        ys_core = np.hstack((ys, np.zeros(add_size))).reshape(num_cores, -1)
    else:
        xs_core = xs.reshape(num_cores, -1)
        ys_core = ys.reshape(num_cores, -1)

    size_core = xs_core.shape[1]

    us = np.zeros((num_cores, size_core), dtype=DOUBLE)
    vs = np.zeros((num_cores, size_core), dtype=DOUBLE)
    ws = np.zeros((num_cores, size_core), dtype=DOUBLE)
    phixs = np.zeros((num_cores, size_core), dtype=DOUBLE)
    phiys = np.zeros((num_cores, size_core), dtype=DOUBLE)

    for i in prange(num_cores, nogil=True, chunksize=1, num_threads=num_cores,
                    schedule='static'):
        cfuvw(&c[0], m1, n1, a, b, &xs_core[i,0],
              &ys_core[i,0], size_core, &us[i,0], &vs[i,0], &ws[i,0])

        cfwx(&c[0], m1, n1, &xs_core[i,0], &ys_core[i,0],
             size_core, a, b, &phixs[i,0])

        cfwy(&c[0], m1, n1, &xs_core[i,0], &ys_core[i,0],
             size_core, a, b, &phiys[i,0])

    phixs *= -1.
    phiys *= -1.
    return (us.ravel()[:size], vs.ravel()[:size], ws.ravel()[:size],
            phixs.ravel()[:size], phiys.ravel()[:size])


cdef void cfuvw(double *c, int m1, int n1, double a, double b, double *xs,
        double *ys, int size, double *us, double *vs, double *ws) nogil:
    cdef int i1, j1, col, i
    cdef double x, y, u, v, w, bx, by
    cdef double fxi[maxorder], feta[maxorder]

    for i in range(size):
        x = xs[i]
        y = ys[i]

        xi = (2*x - a)/a
        eta = (2*y - b)/b

        u = 0
        v = 0
        w = 0

        fxi = [xi**3/4 - 3*xi/4 + 1/2,
               xi**3/8 - xi**2/8 - xi/8 + 1/8,
               -xi**3/4 + 3*xi/4 + 1/2,
               xi**3/8 + xi**2/8 - xi/8 - 1/8,
               xi**4/8 - xi**2/4 + 1/8,
               xi**5/8 - xi**3/4 + xi/8,
               7*xi**6/48 - 5*xi**4/16 + 3*xi**2/16 - 1/48,
               3*xi**7/16 - 7*xi**5/16 + 5*xi**3/16 - xi/16,
               33*xi**8/128 - 21*xi**6/32 + 35*xi**4/64 - 5*xi**2/32 + 1/128,
               143*xi**9/384 - 33*xi**7/32 + 63*xi**5/64 - 35*xi**3/96 + 5*xi/128,
               143*xi**10/256 - 429*xi**8/256 + 231*xi**6/128 - 105*xi**4/128 + 35*xi**2/256 - 1/256,
               221*xi**11/256 - 715*xi**9/256 + 429*xi**7/128 - 231*xi**5/128 + 105*xi**3/256 - 7*xi/256,
               4199*xi**12/3072 - 2431*xi**10/512 + 6435*xi**8/1024 - 1001*xi**6/256 + 1155*xi**4/1024 - 63*xi**2/512 + 7/3072,
               2261*xi**13/1024 - 4199*xi**11/512 + 12155*xi**9/1024 - 2145*xi**7/256 + 3003*xi**5/1024 - 231*xi**3/512 + 21*xi/1024,
               7429*xi**14/2048 - 29393*xi**12/2048 + 46189*xi**10/2048 - 36465*xi**8/2048 + 15015*xi**6/2048 - 3003*xi**4/2048 + 231*xi**2/2048 - 3/2048,
               37145*xi**15/6144 - 52003*xi**13/2048 + 88179*xi**11/2048 - 230945*xi**9/6144 + 36465*xi**7/2048 - 9009*xi**5/2048 + 1001*xi**3/2048 - 33*xi/2048,
               334305*xi**16/32768 - 185725*xi**14/4096 + 676039*xi**12/8192 - 323323*xi**10/4096 + 692835*xi**8/16384 - 51051*xi**6/4096 + 15015*xi**4/8192 - 429*xi**2/4096 + 33/32768,
               570285*xi**17/32768 - 334305*xi**15/4096 + 1300075*xi**13/8192 - 676039*xi**11/4096 + 1616615*xi**9/16384 - 138567*xi**7/4096 + 51051*xi**5/8192 - 2145*xi**3/4096 + 429*xi/32768,
               1964315*xi**18/65536 - 9694845*xi**16/65536 + 5014575*xi**14/16384 - 16900975*xi**12/49152 + 7436429*xi**10/32768 - 2909907*xi**8/32768 + 323323*xi**6/16384 - 36465*xi**4/16384 + 6435*xi**2/65536 - 143/196608,
               3411705*xi**19/65536 - 17678835*xi**17/65536 + 9694845*xi**15/16384 - 11700675*xi**13/16384 + 16900975*xi**11/32768 - 7436429*xi**9/32768 + 969969*xi**7/16384 - 138567*xi**5/16384 + 36465*xi**3/65536 - 715*xi/65536,
               23881935*xi**20/262144 - 64822395*xi**18/131072 + 300540195*xi**16/262144 - 48474225*xi**14/32768 + 152108775*xi**12/131072 - 37182145*xi**10/65536 + 22309287*xi**8/131072 - 969969*xi**6/32768 + 692835*xi**4/262144 - 12155*xi**2/131072 + 143/262144,
               42077695*xi**21/262144 - 119409675*xi**19/131072 + 583401555*xi**17/262144 - 100180065*xi**15/32768 + 339319575*xi**13/131072 - 91265265*xi**11/65536 + 185910725*xi**9/393216 - 3187041*xi**7/32768 + 2909907*xi**5/262144 - 230945*xi**3/393216 + 2431*xi/262144,
               149184555*xi**22/524288 - 883631595*xi**20/524288 + 2268783825*xi**18/524288 - 3305942145*xi**16/524288 + 1502700975*xi**14/262144 - 882230895*xi**12/262144 + 334639305*xi**10/262144 - 79676025*xi**8/262144 + 22309287*xi**6/524288 - 1616615*xi**4/524288 + 46189*xi**2/524288 - 221/524288,
               265937685*xi**23/524288 - 1641030105*xi**21/524288 + 4418157975*xi**19/524288 - 6806351475*xi**17/524288 + 3305942145*xi**15/262144 - 2103781365*xi**13/262144 + 882230895*xi**11/262144 - 239028075*xi**9/262144 + 79676025*xi**7/524288 - 7436429*xi**5/524288 + 323323*xi**3/524288 - 4199*xi/524288,
               3811773485*xi**24/4194304 - 6116566755*xi**22/1048576 + 34461632205*xi**20/2097152 - 27981667175*xi**18/1048576 + 115707975075*xi**16/4194304 - 9917826435*xi**14/524288 + 9116385915*xi**12/1048576 - 1386362835*xi**10/524288 + 2151252675*xi**8/4194304 - 185910725*xi**6/3145728 + 7436429*xi**4/2097152 - 88179*xi**2/1048576 + 4199/12582912,
               6861192273*xi**25/4194304 - 11435320455*xi**23/1048576 + 67282234305*xi**21/2097152 - 57436053675*xi**19/1048576 + 251835004575*xi**17/4194304 - 23141595015*xi**15/524288 + 23141595015*xi**13/1048576 - 3907022535*xi**11/524288 + 6931814175*xi**9/4194304 - 239028075*xi**7/1048576 + 37182145*xi**5/2097152 - 676039*xi**3/1048576 + 29393*xi/4194304,
               24805848987*xi**26/8388608 - 171529806825*xi**24/8388608 + 263012370465*xi**22/4194304 - 470975640135*xi**20/4194304 + 1091285019825*xi**18/8388608 - 856239015555*xi**16/8388608 + 115707975075*xi**14/2097152 - 42977247885*xi**12/2097152 + 42977247885*xi**10/8388608 - 6931814175*xi**8/8388608 + 334639305*xi**6/4194304 - 16900975*xi**4/4194304 + 676039*xi**2/8388608 - 2261/8388608,
               135054066707*xi**27/25165824 - 322476036831*xi**25/8388608 + 514589420475*xi**23/4194304 - 964378691705*xi**21/4194304 + 2354878200675*xi**19/8388608 - 1964313035685*xi**17/8388608 + 285413005185*xi**15/2097152 - 115707975075*xi**13/2097152 + 128931743655*xi**11/8388608 - 23876248825*xi**9/8388608 + 1386362835*xi**7/4194304 - 91265265*xi**5/4194304 + 16900975*xi**3/25165824 - 52003*xi/8388608,
               327988447717*xi**28/33554432 - 1215486600363*xi**26/16777216 + 8061900920775*xi**24/33554432 - 3945185556975*xi**22/8388608 + 20251952525805*xi**20/33554432 - 8948537162565*xi**18/16777216 + 11131107202215*xi**16/33554432 - 611599296825*xi**14/4194304 + 1504203675975*xi**12/33554432 - 157583242245*xi**10/16777216 + 42977247885*xi**8/33554432 - 882230895*xi**6/8388608 + 152108775*xi**4/33554432 - 1300075*xi**2/16777216 + 7429/33554432,
               599427163069*xi**29/33554432 - 2295919134019*xi**27/16777216 + 15801325804719*xi**25/33554432 - 8061900920775*xi**23/8388608 + 43397041126725*xi**21/33554432 - 20251952525805*xi**19/16777216 + 26845611487695*xi**17/33554432 - 1590158171745*xi**15/4194304 + 4281195077775*xi**13/33554432 - 501401225325*xi**11/16777216 + 157583242245*xi**9/33554432 - 3907022535*xi**7/8388608 + 882230895*xi**5/33554432 - 11700675*xi**3/16777216 + 185725*xi/33554432
                ]

        feta = [eta**3/4 - 3*eta/4 + 1/2,
               eta**3/8 - eta**2/8 - eta/8 + 1/8,
               -eta**3/4 + 3*eta/4 + 1/2,
               eta**3/8 + eta**2/8 - eta/8 - 1/8,
               eta**4/8 - eta**2/4 + 1/8,
               eta**5/8 - eta**3/4 + eta/8,
               7*eta**6/48 - 5*eta**4/16 + 3*eta**2/16 - 1/48,
               3*eta**7/16 - 7*eta**5/16 + 5*eta**3/16 - eta/16,
               33*eta**8/128 - 21*eta**6/32 + 35*eta**4/64 - 5*eta**2/32 + 1/128,
               143*eta**9/384 - 33*eta**7/32 + 63*eta**5/64 - 35*eta**3/96 + 5*eta/128,
               143*eta**10/256 - 429*eta**8/256 + 231*eta**6/128 - 105*eta**4/128 + 35*eta**2/256 - 1/256,
               221*eta**11/256 - 715*eta**9/256 + 429*eta**7/128 - 231*eta**5/128 + 105*eta**3/256 - 7*eta/256,
               4199*eta**12/3072 - 2431*eta**10/512 + 6435*eta**8/1024 - 1001*eta**6/256 + 1155*eta**4/1024 - 63*eta**2/512 + 7/3072,
               2261*eta**13/1024 - 4199*eta**11/512 + 12155*eta**9/1024 - 2145*eta**7/256 + 3003*eta**5/1024 - 231*eta**3/512 + 21*eta/1024,
               7429*eta**14/2048 - 29393*eta**12/2048 + 46189*eta**10/2048 - 36465*eta**8/2048 + 15015*eta**6/2048 - 3003*eta**4/2048 + 231*eta**2/2048 - 3/2048,
               37145*eta**15/6144 - 52003*eta**13/2048 + 88179*eta**11/2048 - 230945*eta**9/6144 + 36465*eta**7/2048 - 9009*eta**5/2048 + 1001*eta**3/2048 - 33*eta/2048,
               334305*eta**16/32768 - 185725*eta**14/4096 + 676039*eta**12/8192 - 323323*eta**10/4096 + 692835*eta**8/16384 - 51051*eta**6/4096 + 15015*eta**4/8192 - 429*eta**2/4096 + 33/32768,
               570285*eta**17/32768 - 334305*eta**15/4096 + 1300075*eta**13/8192 - 676039*eta**11/4096 + 1616615*eta**9/16384 - 138567*eta**7/4096 + 51051*eta**5/8192 - 2145*eta**3/4096 + 429*eta/32768,
               1964315*eta**18/65536 - 9694845*eta**16/65536 + 5014575*eta**14/16384 - 16900975*eta**12/49152 + 7436429*eta**10/32768 - 2909907*eta**8/32768 + 323323*eta**6/16384 - 36465*eta**4/16384 + 6435*eta**2/65536 - 143/196608,
               3411705*eta**19/65536 - 17678835*eta**17/65536 + 9694845*eta**15/16384 - 11700675*eta**13/16384 + 16900975*eta**11/32768 - 7436429*eta**9/32768 + 969969*eta**7/16384 - 138567*eta**5/16384 + 36465*eta**3/65536 - 715*eta/65536,
               23881935*eta**20/262144 - 64822395*eta**18/131072 + 300540195*eta**16/262144 - 48474225*eta**14/32768 + 152108775*eta**12/131072 - 37182145*eta**10/65536 + 22309287*eta**8/131072 - 969969*eta**6/32768 + 692835*eta**4/262144 - 12155*eta**2/131072 + 143/262144,
               42077695*eta**21/262144 - 119409675*eta**19/131072 + 583401555*eta**17/262144 - 100180065*eta**15/32768 + 339319575*eta**13/131072 - 91265265*eta**11/65536 + 185910725*eta**9/393216 - 3187041*eta**7/32768 + 2909907*eta**5/262144 - 230945*eta**3/393216 + 2431*eta/262144,
               149184555*eta**22/524288 - 883631595*eta**20/524288 + 2268783825*eta**18/524288 - 3305942145*eta**16/524288 + 1502700975*eta**14/262144 - 882230895*eta**12/262144 + 334639305*eta**10/262144 - 79676025*eta**8/262144 + 22309287*eta**6/524288 - 1616615*eta**4/524288 + 46189*eta**2/524288 - 221/524288,
               265937685*eta**23/524288 - 1641030105*eta**21/524288 + 4418157975*eta**19/524288 - 6806351475*eta**17/524288 + 3305942145*eta**15/262144 - 2103781365*eta**13/262144 + 882230895*eta**11/262144 - 239028075*eta**9/262144 + 79676025*eta**7/524288 - 7436429*eta**5/524288 + 323323*eta**3/524288 - 4199*eta/524288,
               3811773485*eta**24/4194304 - 6116566755*eta**22/1048576 + 34461632205*eta**20/2097152 - 27981667175*eta**18/1048576 + 115707975075*eta**16/4194304 - 9917826435*eta**14/524288 + 9116385915*eta**12/1048576 - 1386362835*eta**10/524288 + 2151252675*eta**8/4194304 - 185910725*eta**6/3145728 + 7436429*eta**4/2097152 - 88179*eta**2/1048576 + 4199/12582912,
               6861192273*eta**25/4194304 - 11435320455*eta**23/1048576 + 67282234305*eta**21/2097152 - 57436053675*eta**19/1048576 + 251835004575*eta**17/4194304 - 23141595015*eta**15/524288 + 23141595015*eta**13/1048576 - 3907022535*eta**11/524288 + 6931814175*eta**9/4194304 - 239028075*eta**7/1048576 + 37182145*eta**5/2097152 - 676039*eta**3/1048576 + 29393*eta/4194304,
               24805848987*eta**26/8388608 - 171529806825*eta**24/8388608 + 263012370465*eta**22/4194304 - 470975640135*eta**20/4194304 + 1091285019825*eta**18/8388608 - 856239015555*eta**16/8388608 + 115707975075*eta**14/2097152 - 42977247885*eta**12/2097152 + 42977247885*eta**10/8388608 - 6931814175*eta**8/8388608 + 334639305*eta**6/4194304 - 16900975*eta**4/4194304 + 676039*eta**2/8388608 - 2261/8388608,
               135054066707*eta**27/25165824 - 322476036831*eta**25/8388608 + 514589420475*eta**23/4194304 - 964378691705*eta**21/4194304 + 2354878200675*eta**19/8388608 - 1964313035685*eta**17/8388608 + 285413005185*eta**15/2097152 - 115707975075*eta**13/2097152 + 128931743655*eta**11/8388608 - 23876248825*eta**9/8388608 + 1386362835*eta**7/4194304 - 91265265*eta**5/4194304 + 16900975*eta**3/25165824 - 52003*eta/8388608,
               327988447717*eta**28/33554432 - 1215486600363*eta**26/16777216 + 8061900920775*eta**24/33554432 - 3945185556975*eta**22/8388608 + 20251952525805*eta**20/33554432 - 8948537162565*eta**18/16777216 + 11131107202215*eta**16/33554432 - 611599296825*eta**14/4194304 + 1504203675975*eta**12/33554432 - 157583242245*eta**10/16777216 + 42977247885*eta**8/33554432 - 882230895*eta**6/8388608 + 152108775*eta**4/33554432 - 1300075*eta**2/16777216 + 7429/33554432,
               599427163069*eta**29/33554432 - 2295919134019*eta**27/16777216 + 15801325804719*eta**25/33554432 - 8061900920775*eta**23/8388608 + 43397041126725*eta**21/33554432 - 20251952525805*eta**19/16777216 + 26845611487695*eta**17/33554432 - 1590158171745*eta**15/4194304 + 4281195077775*eta**13/33554432 - 501401225325*eta**11/16777216 + 157583242245*eta**9/33554432 - 3907022535*eta**7/8388608 + 882230895*eta**5/33554432 - 11700675*eta**3/16777216 + 185725*eta/33554432
                ]

        for i1 in range(1, m1+1):
            for j1 in range(1, n1+1):
                col = num1*((j1-1)*m1 + (i1-1))
                w += c[col+2]*fxi[i1]*feta[j1]

        us[i] = u
        vs[i] = v
        ws[i] = w


def fg(double[:,::1] g, int m1, int n1,
       double x, double y, double a, double b):
    cfg(g, m1, n1, x, y, a, b)


cdef void cfg(double[:,::1] g, int m1, int n1,
              double x, double y, double a, double b) nogil:
    cdef int i1, j1, col
    cdef double xi, eta

    cdef double fxi[maxorder], feta[maxorder]

    xi = (2*x - a)/a
    eta = (2*y - b)/b

    fxi = [xi**3/4 - 3*xi/4 + 1/2,
           xi**3/8 - xi**2/8 - xi/8 + 1/8,
           -xi**3/4 + 3*xi/4 + 1/2,
           xi**3/8 + xi**2/8 - xi/8 - 1/8,
           xi**4/8 - xi**2/4 + 1/8,
           xi**5/8 - xi**3/4 + xi/8,
           7*xi**6/48 - 5*xi**4/16 + 3*xi**2/16 - 1/48,
           3*xi**7/16 - 7*xi**5/16 + 5*xi**3/16 - xi/16,
           33*xi**8/128 - 21*xi**6/32 + 35*xi**4/64 - 5*xi**2/32 + 1/128,
           143*xi**9/384 - 33*xi**7/32 + 63*xi**5/64 - 35*xi**3/96 + 5*xi/128,
           143*xi**10/256 - 429*xi**8/256 + 231*xi**6/128 - 105*xi**4/128 + 35*xi**2/256 - 1/256,
           221*xi**11/256 - 715*xi**9/256 + 429*xi**7/128 - 231*xi**5/128 + 105*xi**3/256 - 7*xi/256,
           4199*xi**12/3072 - 2431*xi**10/512 + 6435*xi**8/1024 - 1001*xi**6/256 + 1155*xi**4/1024 - 63*xi**2/512 + 7/3072,
           2261*xi**13/1024 - 4199*xi**11/512 + 12155*xi**9/1024 - 2145*xi**7/256 + 3003*xi**5/1024 - 231*xi**3/512 + 21*xi/1024,
           7429*xi**14/2048 - 29393*xi**12/2048 + 46189*xi**10/2048 - 36465*xi**8/2048 + 15015*xi**6/2048 - 3003*xi**4/2048 + 231*xi**2/2048 - 3/2048,
           37145*xi**15/6144 - 52003*xi**13/2048 + 88179*xi**11/2048 - 230945*xi**9/6144 + 36465*xi**7/2048 - 9009*xi**5/2048 + 1001*xi**3/2048 - 33*xi/2048,
           334305*xi**16/32768 - 185725*xi**14/4096 + 676039*xi**12/8192 - 323323*xi**10/4096 + 692835*xi**8/16384 - 51051*xi**6/4096 + 15015*xi**4/8192 - 429*xi**2/4096 + 33/32768,
           570285*xi**17/32768 - 334305*xi**15/4096 + 1300075*xi**13/8192 - 676039*xi**11/4096 + 1616615*xi**9/16384 - 138567*xi**7/4096 + 51051*xi**5/8192 - 2145*xi**3/4096 + 429*xi/32768,
           1964315*xi**18/65536 - 9694845*xi**16/65536 + 5014575*xi**14/16384 - 16900975*xi**12/49152 + 7436429*xi**10/32768 - 2909907*xi**8/32768 + 323323*xi**6/16384 - 36465*xi**4/16384 + 6435*xi**2/65536 - 143/196608,
           3411705*xi**19/65536 - 17678835*xi**17/65536 + 9694845*xi**15/16384 - 11700675*xi**13/16384 + 16900975*xi**11/32768 - 7436429*xi**9/32768 + 969969*xi**7/16384 - 138567*xi**5/16384 + 36465*xi**3/65536 - 715*xi/65536,
           23881935*xi**20/262144 - 64822395*xi**18/131072 + 300540195*xi**16/262144 - 48474225*xi**14/32768 + 152108775*xi**12/131072 - 37182145*xi**10/65536 + 22309287*xi**8/131072 - 969969*xi**6/32768 + 692835*xi**4/262144 - 12155*xi**2/131072 + 143/262144,
           42077695*xi**21/262144 - 119409675*xi**19/131072 + 583401555*xi**17/262144 - 100180065*xi**15/32768 + 339319575*xi**13/131072 - 91265265*xi**11/65536 + 185910725*xi**9/393216 - 3187041*xi**7/32768 + 2909907*xi**5/262144 - 230945*xi**3/393216 + 2431*xi/262144,
           149184555*xi**22/524288 - 883631595*xi**20/524288 + 2268783825*xi**18/524288 - 3305942145*xi**16/524288 + 1502700975*xi**14/262144 - 882230895*xi**12/262144 + 334639305*xi**10/262144 - 79676025*xi**8/262144 + 22309287*xi**6/524288 - 1616615*xi**4/524288 + 46189*xi**2/524288 - 221/524288,
           265937685*xi**23/524288 - 1641030105*xi**21/524288 + 4418157975*xi**19/524288 - 6806351475*xi**17/524288 + 3305942145*xi**15/262144 - 2103781365*xi**13/262144 + 882230895*xi**11/262144 - 239028075*xi**9/262144 + 79676025*xi**7/524288 - 7436429*xi**5/524288 + 323323*xi**3/524288 - 4199*xi/524288,
           3811773485*xi**24/4194304 - 6116566755*xi**22/1048576 + 34461632205*xi**20/2097152 - 27981667175*xi**18/1048576 + 115707975075*xi**16/4194304 - 9917826435*xi**14/524288 + 9116385915*xi**12/1048576 - 1386362835*xi**10/524288 + 2151252675*xi**8/4194304 - 185910725*xi**6/3145728 + 7436429*xi**4/2097152 - 88179*xi**2/1048576 + 4199/12582912,
           6861192273*xi**25/4194304 - 11435320455*xi**23/1048576 + 67282234305*xi**21/2097152 - 57436053675*xi**19/1048576 + 251835004575*xi**17/4194304 - 23141595015*xi**15/524288 + 23141595015*xi**13/1048576 - 3907022535*xi**11/524288 + 6931814175*xi**9/4194304 - 239028075*xi**7/1048576 + 37182145*xi**5/2097152 - 676039*xi**3/1048576 + 29393*xi/4194304,
           24805848987*xi**26/8388608 - 171529806825*xi**24/8388608 + 263012370465*xi**22/4194304 - 470975640135*xi**20/4194304 + 1091285019825*xi**18/8388608 - 856239015555*xi**16/8388608 + 115707975075*xi**14/2097152 - 42977247885*xi**12/2097152 + 42977247885*xi**10/8388608 - 6931814175*xi**8/8388608 + 334639305*xi**6/4194304 - 16900975*xi**4/4194304 + 676039*xi**2/8388608 - 2261/8388608,
           135054066707*xi**27/25165824 - 322476036831*xi**25/8388608 + 514589420475*xi**23/4194304 - 964378691705*xi**21/4194304 + 2354878200675*xi**19/8388608 - 1964313035685*xi**17/8388608 + 285413005185*xi**15/2097152 - 115707975075*xi**13/2097152 + 128931743655*xi**11/8388608 - 23876248825*xi**9/8388608 + 1386362835*xi**7/4194304 - 91265265*xi**5/4194304 + 16900975*xi**3/25165824 - 52003*xi/8388608,
           327988447717*xi**28/33554432 - 1215486600363*xi**26/16777216 + 8061900920775*xi**24/33554432 - 3945185556975*xi**22/8388608 + 20251952525805*xi**20/33554432 - 8948537162565*xi**18/16777216 + 11131107202215*xi**16/33554432 - 611599296825*xi**14/4194304 + 1504203675975*xi**12/33554432 - 157583242245*xi**10/16777216 + 42977247885*xi**8/33554432 - 882230895*xi**6/8388608 + 152108775*xi**4/33554432 - 1300075*xi**2/16777216 + 7429/33554432,
           599427163069*xi**29/33554432 - 2295919134019*xi**27/16777216 + 15801325804719*xi**25/33554432 - 8061900920775*xi**23/8388608 + 43397041126725*xi**21/33554432 - 20251952525805*xi**19/16777216 + 26845611487695*xi**17/33554432 - 1590158171745*xi**15/4194304 + 4281195077775*xi**13/33554432 - 501401225325*xi**11/16777216 + 157583242245*xi**9/33554432 - 3907022535*xi**7/8388608 + 882230895*xi**5/33554432 - 11700675*xi**3/16777216 + 185725*xi/33554432
            ]

    feta = [eta**3/4 - 3*eta/4 + 1/2,
           eta**3/8 - eta**2/8 - eta/8 + 1/8,
           -eta**3/4 + 3*eta/4 + 1/2,
           eta**3/8 + eta**2/8 - eta/8 - 1/8,
           eta**4/8 - eta**2/4 + 1/8,
           eta**5/8 - eta**3/4 + eta/8,
           7*eta**6/48 - 5*eta**4/16 + 3*eta**2/16 - 1/48,
           3*eta**7/16 - 7*eta**5/16 + 5*eta**3/16 - eta/16,
           33*eta**8/128 - 21*eta**6/32 + 35*eta**4/64 - 5*eta**2/32 + 1/128,
           143*eta**9/384 - 33*eta**7/32 + 63*eta**5/64 - 35*eta**3/96 + 5*eta/128,
           143*eta**10/256 - 429*eta**8/256 + 231*eta**6/128 - 105*eta**4/128 + 35*eta**2/256 - 1/256,
           221*eta**11/256 - 715*eta**9/256 + 429*eta**7/128 - 231*eta**5/128 + 105*eta**3/256 - 7*eta/256,
           4199*eta**12/3072 - 2431*eta**10/512 + 6435*eta**8/1024 - 1001*eta**6/256 + 1155*eta**4/1024 - 63*eta**2/512 + 7/3072,
           2261*eta**13/1024 - 4199*eta**11/512 + 12155*eta**9/1024 - 2145*eta**7/256 + 3003*eta**5/1024 - 231*eta**3/512 + 21*eta/1024,
           7429*eta**14/2048 - 29393*eta**12/2048 + 46189*eta**10/2048 - 36465*eta**8/2048 + 15015*eta**6/2048 - 3003*eta**4/2048 + 231*eta**2/2048 - 3/2048,
           37145*eta**15/6144 - 52003*eta**13/2048 + 88179*eta**11/2048 - 230945*eta**9/6144 + 36465*eta**7/2048 - 9009*eta**5/2048 + 1001*eta**3/2048 - 33*eta/2048,
           334305*eta**16/32768 - 185725*eta**14/4096 + 676039*eta**12/8192 - 323323*eta**10/4096 + 692835*eta**8/16384 - 51051*eta**6/4096 + 15015*eta**4/8192 - 429*eta**2/4096 + 33/32768,
           570285*eta**17/32768 - 334305*eta**15/4096 + 1300075*eta**13/8192 - 676039*eta**11/4096 + 1616615*eta**9/16384 - 138567*eta**7/4096 + 51051*eta**5/8192 - 2145*eta**3/4096 + 429*eta/32768,
           1964315*eta**18/65536 - 9694845*eta**16/65536 + 5014575*eta**14/16384 - 16900975*eta**12/49152 + 7436429*eta**10/32768 - 2909907*eta**8/32768 + 323323*eta**6/16384 - 36465*eta**4/16384 + 6435*eta**2/65536 - 143/196608,
           3411705*eta**19/65536 - 17678835*eta**17/65536 + 9694845*eta**15/16384 - 11700675*eta**13/16384 + 16900975*eta**11/32768 - 7436429*eta**9/32768 + 969969*eta**7/16384 - 138567*eta**5/16384 + 36465*eta**3/65536 - 715*eta/65536,
           23881935*eta**20/262144 - 64822395*eta**18/131072 + 300540195*eta**16/262144 - 48474225*eta**14/32768 + 152108775*eta**12/131072 - 37182145*eta**10/65536 + 22309287*eta**8/131072 - 969969*eta**6/32768 + 692835*eta**4/262144 - 12155*eta**2/131072 + 143/262144,
           42077695*eta**21/262144 - 119409675*eta**19/131072 + 583401555*eta**17/262144 - 100180065*eta**15/32768 + 339319575*eta**13/131072 - 91265265*eta**11/65536 + 185910725*eta**9/393216 - 3187041*eta**7/32768 + 2909907*eta**5/262144 - 230945*eta**3/393216 + 2431*eta/262144,
           149184555*eta**22/524288 - 883631595*eta**20/524288 + 2268783825*eta**18/524288 - 3305942145*eta**16/524288 + 1502700975*eta**14/262144 - 882230895*eta**12/262144 + 334639305*eta**10/262144 - 79676025*eta**8/262144 + 22309287*eta**6/524288 - 1616615*eta**4/524288 + 46189*eta**2/524288 - 221/524288,
           265937685*eta**23/524288 - 1641030105*eta**21/524288 + 4418157975*eta**19/524288 - 6806351475*eta**17/524288 + 3305942145*eta**15/262144 - 2103781365*eta**13/262144 + 882230895*eta**11/262144 - 239028075*eta**9/262144 + 79676025*eta**7/524288 - 7436429*eta**5/524288 + 323323*eta**3/524288 - 4199*eta/524288,
           3811773485*eta**24/4194304 - 6116566755*eta**22/1048576 + 34461632205*eta**20/2097152 - 27981667175*eta**18/1048576 + 115707975075*eta**16/4194304 - 9917826435*eta**14/524288 + 9116385915*eta**12/1048576 - 1386362835*eta**10/524288 + 2151252675*eta**8/4194304 - 185910725*eta**6/3145728 + 7436429*eta**4/2097152 - 88179*eta**2/1048576 + 4199/12582912,
           6861192273*eta**25/4194304 - 11435320455*eta**23/1048576 + 67282234305*eta**21/2097152 - 57436053675*eta**19/1048576 + 251835004575*eta**17/4194304 - 23141595015*eta**15/524288 + 23141595015*eta**13/1048576 - 3907022535*eta**11/524288 + 6931814175*eta**9/4194304 - 239028075*eta**7/1048576 + 37182145*eta**5/2097152 - 676039*eta**3/1048576 + 29393*eta/4194304,
           24805848987*eta**26/8388608 - 171529806825*eta**24/8388608 + 263012370465*eta**22/4194304 - 470975640135*eta**20/4194304 + 1091285019825*eta**18/8388608 - 856239015555*eta**16/8388608 + 115707975075*eta**14/2097152 - 42977247885*eta**12/2097152 + 42977247885*eta**10/8388608 - 6931814175*eta**8/8388608 + 334639305*eta**6/4194304 - 16900975*eta**4/4194304 + 676039*eta**2/8388608 - 2261/8388608,
           135054066707*eta**27/25165824 - 322476036831*eta**25/8388608 + 514589420475*eta**23/4194304 - 964378691705*eta**21/4194304 + 2354878200675*eta**19/8388608 - 1964313035685*eta**17/8388608 + 285413005185*eta**15/2097152 - 115707975075*eta**13/2097152 + 128931743655*eta**11/8388608 - 23876248825*eta**9/8388608 + 1386362835*eta**7/4194304 - 91265265*eta**5/4194304 + 16900975*eta**3/25165824 - 52003*eta/8388608,
           327988447717*eta**28/33554432 - 1215486600363*eta**26/16777216 + 8061900920775*eta**24/33554432 - 3945185556975*eta**22/8388608 + 20251952525805*eta**20/33554432 - 8948537162565*eta**18/16777216 + 11131107202215*eta**16/33554432 - 611599296825*eta**14/4194304 + 1504203675975*eta**12/33554432 - 157583242245*eta**10/16777216 + 42977247885*eta**8/33554432 - 882230895*eta**6/8388608 + 152108775*eta**4/33554432 - 1300075*eta**2/16777216 + 7429/33554432,
           599427163069*eta**29/33554432 - 2295919134019*eta**27/16777216 + 15801325804719*eta**25/33554432 - 8061900920775*eta**23/8388608 + 43397041126725*eta**21/33554432 - 20251952525805*eta**19/16777216 + 26845611487695*eta**17/33554432 - 1590158171745*eta**15/4194304 + 4281195077775*eta**13/33554432 - 501401225325*eta**11/16777216 + 157583242245*eta**9/33554432 - 3907022535*eta**7/8388608 + 882230895*eta**5/33554432 - 11700675*eta**3/16777216 + 185725*eta/33554432
            ]

    for i1 in range(1, m1+1):
        for j1 in range(1, n1+1):
            col = num1*((j1-1)*m1 + (i1-1))
            g[0, col+0] = 0
            g[1, col+1] = 0
            g[2, col+2] = fxi[i1]*feta[j1]


cdef void cfN(double *c, double *xs, double *ys, int size, double a, double b,
        double *F, int m1, int n1, double *c0, int m0, int n0, int funcnum,
        double *Ns, int NL_kinematics) nogil:
    # NL_kinematics = 0 donnell
    # NL_kinematics = 1 sanders
    cdef int i
    cdef double exx, eyy, gxy, kxx, kyy, kxy
    cdef double *es = <double *>malloc(size*e_num * sizeof(double))
    cdef double A11, A12, A16, A22, A26, A66
    cdef double B11, B12, B16, B22, B26, B66
    cdef double D11, D12, D16, D22, D26, D66
    cdef cfstraintype *cfstrain

    if NL_kinematics==0:
        cfstrain = &cfstrain_donnell
    else:
        with gil:
            raise NotImplementedError('only NL_kinematics=0 is implemented')
    #elif NL_kinematics==1:
        #cfstrain = &cfstrain_sanders

    cfstrain(c, xs, ys, size, a, b, m1, n1,
             c0, m0, n0, funcnum, es)

    A11 = F[0]
    A12 = F[1]
    A16 = F[2]
    A22 = F[7]
    A26 = F[8]
    A66 = F[14]
    B11 = F[3]
    B12 = F[4]
    B16 = F[5]
    B22 = F[10]
    B26 = F[11]
    B66 = F[17]
    D11 = F[18]
    D12 = F[19]
    D16 = F[20]
    D22 = F[25]
    D26 = F[26]
    D66 = F[32]

    for i in range(size):
        exx = es[e_num*i + 0]
        eyy = es[e_num*i + 1]
        gxy = es[e_num*i + 2]
        kxx = es[e_num*i + 3]
        kyy = es[e_num*i + 4]
        kxy = es[e_num*i + 5]
        Ns[e_num*i + 0] = A11*exx + A12*eyy + A16*gxy + B11*kxx + B12*kyy + B16*kxy
        Ns[e_num*i + 1] = A12*exx + A22*eyy + A26*gxy + B12*kxx + B22*kyy + B26*kxy
        Ns[e_num*i + 2] = A16*exx + A26*eyy + A66*gxy + B16*kxx + B26*kyy + B66*kxy
        Ns[e_num*i + 3] = B11*exx + B12*eyy + B16*gxy + D11*kxx + D12*kyy + D16*kxy
        Ns[e_num*i + 4] = B12*exx + B22*eyy + B26*gxy + D12*kxx + D22*kyy + D26*kxy
        Ns[e_num*i + 5] = B16*exx + B26*eyy + B66*gxy + D16*kxx + D26*kyy + D66*kxy
    free(es)


cdef void *cfstrain_donnell(double *c, double *xs, double *ys, int size,
        double a, double b, int m1, int n1, double *c0, int m0, int n0,
        int funcnum, double *es) nogil:
    cdef int i, i1, j1, col
    cdef double wx, wy, w0x, w0y, x, y
    cdef double exx, eyy, gxy, kxx, kyy, kxy
    cdef double sini1bx, cosi1bx, sinj1by

    cdef double *wxs = <double *>malloc(size * sizeof(double))
    cdef double *wys = <double *>malloc(size * sizeof(double))
    #cdef double *w0xs = <double *>malloc(size * sizeof(double))
    #cdef double *w0ts = <double *>malloc(size * sizeof(double))

    cfwx(c, m1, n1, xs, ys, size, a, b, wxs)
    cfwy(c, m1, n1, xs, ys, size, a, b, wys)

    w0x = 0
    w0y = 0

    for i in range(size):
        x = xs[i]
        y = ys[i]
        wx = wxs[i]
        wy = wys[i]
        #w0x = w0xs[i]
        #w0y = w0ts[i]

        exx = 0
        eyy = 0
        gxy = 0
        kxx = 0
        kyy = 0
        kxy = 0

        for j1 in range(1, n1+1):
            for i1 in range(1, m1+1):
                col = num0 + num1*((j1-1)*m1 + (i1-1))

                exx += (0)

                eyy += (0)

                gxy += (0)

                kxx += 0

                kyy += 0


                kxy += 0


        es[e_num*i + 0] = exx
        es[e_num*i + 1] = eyy
        es[e_num*i + 2] = gxy
        es[e_num*i + 3] = kxx
        es[e_num*i + 4] = kyy
        es[e_num*i + 5] = kxy

    free(wxs)
    free(wys)
    #free(w0xs)
    #free(w0ts)

